// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: channels.sql

package sqlc

import (
	"context"
	"time"
)

const addChannelSignature = `-- name: AddChannelSignature :exec
UPDATE channels
SET signature = $2
WHERE id = $1
`

type AddChannelSignatureParams struct {
	ID        int64
	Signature []byte
}

func (q *Queries) AddChannelSignature(ctx context.Context, arg AddChannelSignatureParams) error {
	_, err := q.db.ExecContext(ctx, addChannelSignature, arg.ID, arg.Signature)
	return err
}

const addClosedSCID = `-- name: AddClosedSCID :exec
INSERT INTO closed_scids (channel_id, created_at)
VALUES ($1, $2)
`

type AddClosedSCIDParams struct {
	ChannelID int64
	CreatedAt time.Time
}

func (q *Queries) AddClosedSCID(ctx context.Context, arg AddClosedSCIDParams) error {
	_, err := q.db.ExecContext(ctx, addClosedSCID, arg.ChannelID, arg.CreatedAt)
	return err
}

const countZombieChannels = `-- name: CountZombieChannels :one
SELECT COUNT(*) FROM zombie_channels
`

func (q *Queries) CountZombieChannels(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countZombieChannels)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const deleteChannel = `-- name: DeleteChannel :exec
DELETE FROM channels
WHERE channel_id = $1
`

func (q *Queries) DeleteChannel(ctx context.Context, channelID int64) error {
	_, err := q.db.ExecContext(ctx, deleteChannel, channelID)
	return err
}

const deleteChannelFeature = `-- name: DeleteChannelFeature :exec
DELETE FROM channel_features
WHERE channel_id = $1
  AND feature = $2
`

type DeleteChannelFeatureParams struct {
	ChannelID int64
	Feature   int32
}

func (q *Queries) DeleteChannelFeature(ctx context.Context, arg DeleteChannelFeatureParams) error {
	_, err := q.db.ExecContext(ctx, deleteChannelFeature, arg.ChannelID, arg.Feature)
	return err
}

const deleteExtraChannelType = `-- name: DeleteExtraChannelType :exec
DELETE FROM channel_extra_types
WHERE channel_id = $1
  AND type = $2
`

type DeleteExtraChannelTypeParams struct {
	ChannelID int64
	Type      int64
}

func (q *Queries) DeleteExtraChannelType(ctx context.Context, arg DeleteExtraChannelTypeParams) error {
	_, err := q.db.ExecContext(ctx, deleteExtraChannelType, arg.ChannelID, arg.Type)
	return err
}

const deleteZombieChannel = `-- name: DeleteZombieChannel :exec
DELETE FROM zombie_channels
WHERE channel_id = $1
`

func (q *Queries) DeleteZombieChannel(ctx context.Context, channelID int64) error {
	_, err := q.db.ExecContext(ctx, deleteZombieChannel, channelID)
	return err
}

const getChannel = `-- name: GetChannel :one
SELECT id, channel_id, outpoint, node_id_1, node_id_2, capacity, signature, created_at
FROM channels
WHERE id = $1
`

func (q *Queries) GetChannel(ctx context.Context, id int64) (Channel, error) {
	row := q.db.QueryRowContext(ctx, getChannel, id)
	var i Channel
	err := row.Scan(
		&i.ID,
		&i.ChannelID,
		&i.Outpoint,
		&i.NodeID1,
		&i.NodeID2,
		&i.Capacity,
		&i.Signature,
		&i.CreatedAt,
	)
	return i, err
}

const getChannelByChanID = `-- name: GetChannelByChanID :one
SELECT id, channel_id, outpoint, node_id_1, node_id_2, capacity, signature, created_at
FROM channels
WHERE channel_id = $1
`

func (q *Queries) GetChannelByChanID(ctx context.Context, channelID int64) (Channel, error) {
	row := q.db.QueryRowContext(ctx, getChannelByChanID, channelID)
	var i Channel
	err := row.Scan(
		&i.ID,
		&i.ChannelID,
		&i.Outpoint,
		&i.NodeID1,
		&i.NodeID2,
		&i.Capacity,
		&i.Signature,
		&i.CreatedAt,
	)
	return i, err
}

const getChannelByOutpoint = `-- name: GetChannelByOutpoint :one
SELECT id, channel_id, outpoint, node_id_1, node_id_2, capacity, signature, created_at
FROM channels
WHERE outpoint = $1
`

func (q *Queries) GetChannelByOutpoint(ctx context.Context, outpoint string) (Channel, error) {
	row := q.db.QueryRowContext(ctx, getChannelByOutpoint, outpoint)
	var i Channel
	err := row.Scan(
		&i.ID,
		&i.ChannelID,
		&i.Outpoint,
		&i.NodeID1,
		&i.NodeID2,
		&i.Capacity,
		&i.Signature,
		&i.CreatedAt,
	)
	return i, err
}

const getChannelFeatures = `-- name: GetChannelFeatures :many
SELECT channel_id, feature
FROM channel_features
WHERE channel_id = $1
`

func (q *Queries) GetChannelFeatures(ctx context.Context, channelID int64) ([]ChannelFeature, error) {
	rows, err := q.db.QueryContext(ctx, getChannelFeatures, channelID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ChannelFeature
	for rows.Next() {
		var i ChannelFeature
		if err := rows.Scan(&i.ChannelID, &i.Feature); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getExtraChannelTypes = `-- name: GetExtraChannelTypes :many
SELECT channel_id, type, value
FROM channel_extra_types
WHERE channel_id = $1
`

func (q *Queries) GetExtraChannelTypes(ctx context.Context, channelID int64) ([]ChannelExtraType, error) {
	rows, err := q.db.QueryContext(ctx, getExtraChannelTypes, channelID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ChannelExtraType
	for rows.Next() {
		var i ChannelExtraType
		if err := rows.Scan(&i.ChannelID, &i.Type, &i.Value); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertChannel = `-- name: InsertChannel :one
INSERT INTO channels (
    channel_id, outpoint, node_id_1, node_id_2, capacity, signature, created_at
) VALUES (
    $1, $2, $3, $4, $5, $6, $7
) RETURNING id
`

type InsertChannelParams struct {
	ChannelID int64
	Outpoint  string
	NodeID1   int64
	NodeID2   int64
	Capacity  int64
	Signature []byte
	CreatedAt time.Time
}

func (q *Queries) InsertChannel(ctx context.Context, arg InsertChannelParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, insertChannel,
		arg.ChannelID,
		arg.Outpoint,
		arg.NodeID1,
		arg.NodeID2,
		arg.Capacity,
		arg.Signature,
		arg.CreatedAt,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const insertChannelFeature = `-- name: InsertChannelFeature :exec
INSERT INTO channel_features (
    channel_id, feature
) VALUES (
    $1, $2
)
`

type InsertChannelFeatureParams struct {
	ChannelID int64
	Feature   int32
}

func (q *Queries) InsertChannelFeature(ctx context.Context, arg InsertChannelFeatureParams) error {
	_, err := q.db.ExecContext(ctx, insertChannelFeature, arg.ChannelID, arg.Feature)
	return err
}

const isClosedSCID = `-- name: IsClosedSCID :one
SELECT EXISTS (
    SELECT 1
    FROM closed_scids
    WHERE channel_id = $1
) AS is_closed
`

func (q *Queries) IsClosedSCID(ctx context.Context, channelID int64) (bool, error) {
	row := q.db.QueryRowContext(ctx, isClosedSCID, channelID)
	var is_closed bool
	err := row.Scan(&is_closed)
	return is_closed, err
}

const isPublicNode = `-- name: IsPublicNode :one
SELECT EXISTS (
    SELECT 1
    FROM channels
    WHERE (node_id_1 = $1 OR node_id_2 = $1)
      AND signature IS NOT NULL
) AS is_public
`

func (q *Queries) IsPublicNode(ctx context.Context, nodeID1 int64) (bool, error) {
	row := q.db.QueryRowContext(ctx, isPublicNode, nodeID1)
	var is_public bool
	err := row.Scan(&is_public)
	return is_public, err
}

const isZombieChannel = `-- name: IsZombieChannel :one
SELECT EXISTS (
    SELECT 1
    FROM zombie_channels
    WHERE channel_id = $1
) AS is_zombie
`

func (q *Queries) IsZombieChannel(ctx context.Context, channelID int64) (bool, error) {
	row := q.db.QueryRowContext(ctx, isZombieChannel, channelID)
	var is_zombie bool
	err := row.Scan(&is_zombie)
	return is_zombie, err
}

const listNodeChannels = `-- name: ListNodeChannels :many
SELECT id, channel_id, outpoint, node_id_1, node_id_2, capacity, signature, created_at
FROM channels
WHERE node_id_1 = $1
   OR node_id_2 = $1
`

func (q *Queries) ListNodeChannels(ctx context.Context, nodeID1 int64) ([]Channel, error) {
	rows, err := q.db.QueryContext(ctx, listNodeChannels, nodeID1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Channel
	for rows.Next() {
		var i Channel
		if err := rows.Scan(
			&i.ID,
			&i.ChannelID,
			&i.Outpoint,
			&i.NodeID1,
			&i.NodeID2,
			&i.Capacity,
			&i.Signature,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const upsertChannelExtraType = `-- name: UpsertChannelExtraType :exec
INSERT INTO channel_extra_types (channel_id, type, value)
VALUES ($1, $2, $3)
ON CONFLICT (type, channel_id)
    DO UPDATE SET value = EXCLUDED.value
`

type UpsertChannelExtraTypeParams struct {
	ChannelID int64
	Type      int64
	Value     []byte
}

func (q *Queries) UpsertChannelExtraType(ctx context.Context, arg UpsertChannelExtraTypeParams) error {
	_, err := q.db.ExecContext(ctx, upsertChannelExtraType, arg.ChannelID, arg.Type, arg.Value)
	return err
}

const upsertZombieChannel = `-- name: UpsertZombieChannel :exec
INSERT INTO zombie_channels (channel_id, node_key_1, node_key_2, created_at)
VALUES ($1, $2, $3, $4)
ON CONFLICT (channel_id)
DO UPDATE SET
    node_key_1 = COALESCE(EXCLUDED.node_key_1, zombie_channels.node_key_1),
    node_key_2 = COALESCE(EXCLUDED.node_key_2, zombie_channels.node_key_2)
`

type UpsertZombieChannelParams struct {
	ChannelID int64
	NodeKey1  []byte
	NodeKey2  []byte
	CreatedAt time.Time
}

func (q *Queries) UpsertZombieChannel(ctx context.Context, arg UpsertZombieChannelParams) error {
	_, err := q.db.ExecContext(ctx, upsertZombieChannel,
		arg.ChannelID,
		arg.NodeKey1,
		arg.NodeKey2,
		arg.CreatedAt,
	)
	return err
}
