// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: nodes.sql

package sqlc

import (
	"context"
	"database/sql"
	"time"
)

const deleteExtraNodeType = `-- name: DeleteExtraNodeType :exec
DELETE FROM node_extra_types
WHERE node_id = $1
  AND type = $2
`

type DeleteExtraNodeTypeParams struct {
	NodeID int64
	Type   int64
}

func (q *Queries) DeleteExtraNodeType(ctx context.Context, arg DeleteExtraNodeTypeParams) error {
	_, err := q.db.ExecContext(ctx, deleteExtraNodeType, arg.NodeID, arg.Type)
	return err
}

const deleteNode = `-- name: DeleteNode :exec
DELETE FROM nodes
WHERE id = $1
`

func (q *Queries) DeleteNode(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteNode, id)
	return err
}

const deleteNodeAddress = `-- name: DeleteNodeAddress :exec
DELETE FROM node_addresses
WHERE node_id = $1
  AND address = $2
`

type DeleteNodeAddressParams struct {
	NodeID  int64
	Address string
}

func (q *Queries) DeleteNodeAddress(ctx context.Context, arg DeleteNodeAddressParams) error {
	_, err := q.db.ExecContext(ctx, deleteNodeAddress, arg.NodeID, arg.Address)
	return err
}

const deleteNodeFeature = `-- name: DeleteNodeFeature :exec
DELETE FROM node_features
WHERE node_id = $1
  AND feature = $2
`

type DeleteNodeFeatureParams struct {
	NodeID  int64
	Feature int32
}

func (q *Queries) DeleteNodeFeature(ctx context.Context, arg DeleteNodeFeatureParams) error {
	_, err := q.db.ExecContext(ctx, deleteNodeFeature, arg.NodeID, arg.Feature)
	return err
}

const getExtraNodeTypes = `-- name: GetExtraNodeTypes :many
SELECT node_id, type, value
FROM node_extra_types
WHERE node_id = $1
`

func (q *Queries) GetExtraNodeTypes(ctx context.Context, nodeID int64) ([]NodeExtraType, error) {
	rows, err := q.db.QueryContext(ctx, getExtraNodeTypes, nodeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []NodeExtraType
	for rows.Next() {
		var i NodeExtraType
		if err := rows.Scan(&i.NodeID, &i.Type, &i.Value); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getNode = `-- name: GetNode :one
SELECT id, pub_key, alias, block_height, signature, created_at, updated_at
FROM nodes
WHERE id = $1
`

func (q *Queries) GetNode(ctx context.Context, id int64) (Node, error) {
	row := q.db.QueryRowContext(ctx, getNode, id)
	var i Node
	err := row.Scan(
		&i.ID,
		&i.PubKey,
		&i.Alias,
		&i.BlockHeight,
		&i.Signature,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getNodeAddresses = `-- name: GetNodeAddresses :many
SELECT node_id, type, address
FROM node_addresses
WHERE node_id = $1
`

func (q *Queries) GetNodeAddresses(ctx context.Context, nodeID int64) ([]NodeAddress, error) {
	rows, err := q.db.QueryContext(ctx, getNodeAddresses, nodeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []NodeAddress
	for rows.Next() {
		var i NodeAddress
		if err := rows.Scan(&i.NodeID, &i.Type, &i.Address); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getNodeAliasByPubKey = `-- name: GetNodeAliasByPubKey :one
SELECT alias
FROM nodes
WHERE pub_key = $1
`

func (q *Queries) GetNodeAliasByPubKey(ctx context.Context, pubKey []byte) (sql.NullString, error) {
	row := q.db.QueryRowContext(ctx, getNodeAliasByPubKey, pubKey)
	var alias sql.NullString
	err := row.Scan(&alias)
	return alias, err
}

const getNodeByPubKey = `-- name: GetNodeByPubKey :one
SELECT id, pub_key, alias, block_height, signature, created_at, updated_at
FROM nodes
WHERE pub_key = $1
`

func (q *Queries) GetNodeByPubKey(ctx context.Context, pubKey []byte) (Node, error) {
	row := q.db.QueryRowContext(ctx, getNodeByPubKey, pubKey)
	var i Node
	err := row.Scan(
		&i.ID,
		&i.PubKey,
		&i.Alias,
		&i.BlockHeight,
		&i.Signature,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getNodeFeatures = `-- name: GetNodeFeatures :many
SELECT node_id, feature
FROM node_features
WHERE node_id = $1
`

func (q *Queries) GetNodeFeatures(ctx context.Context, nodeID int64) ([]NodeFeature, error) {
	rows, err := q.db.QueryContext(ctx, getNodeFeatures, nodeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []NodeFeature
	for rows.Next() {
		var i NodeFeature
		if err := rows.Scan(&i.NodeID, &i.Feature); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getNodeIDByPubKey = `-- name: GetNodeIDByPubKey :one
SELECT id
FROM nodes
WHERE pub_key = $1
`

func (q *Queries) GetNodeIDByPubKey(ctx context.Context, pubKey []byte) (int64, error) {
	row := q.db.QueryRowContext(ctx, getNodeIDByPubKey, pubKey)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const getSourceNode = `-- name: GetSourceNode :one
SELECT node_id
FROM source_node
`

func (q *Queries) GetSourceNode(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, getSourceNode)
	var node_id int64
	err := row.Scan(&node_id)
	return node_id, err
}

const insertNode = `-- name: InsertNode :one
INSERT INTO nodes (
    pub_key, alias, block_height, signature, created_at, updated_at
) VALUES (
    $1, $2, $3, $4, $5, $6
) RETURNING id
`

type InsertNodeParams struct {
	PubKey      []byte
	Alias       sql.NullString
	BlockHeight int64
	Signature   []byte
	CreatedAt   time.Time
	UpdatedAt   time.Time
}

func (q *Queries) InsertNode(ctx context.Context, arg InsertNodeParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, insertNode,
		arg.PubKey,
		arg.Alias,
		arg.BlockHeight,
		arg.Signature,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const insertNodeAddress = `-- name: InsertNodeAddress :exec
INSERT INTO node_addresses (
    node_id, type, address
) VALUES (
    $1, $2, $3
)
`

type InsertNodeAddressParams struct {
	NodeID  int64
	Type    int16
	Address string
}

func (q *Queries) InsertNodeAddress(ctx context.Context, arg InsertNodeAddressParams) error {
	_, err := q.db.ExecContext(ctx, insertNodeAddress, arg.NodeID, arg.Type, arg.Address)
	return err
}

const insertNodeFeature = `-- name: InsertNodeFeature :exec
INSERT INTO node_features (
    node_id, feature
) VALUES (
    $1, $2
)
`

type InsertNodeFeatureParams struct {
	NodeID  int64
	Feature int32
}

func (q *Queries) InsertNodeFeature(ctx context.Context, arg InsertNodeFeatureParams) error {
	_, err := q.db.ExecContext(ctx, insertNodeFeature, arg.NodeID, arg.Feature)
	return err
}

const setSourceNode = `-- name: SetSourceNode :exec
INSERT INTO source_node (node_id)
VALUES ($1)
ON CONFLICT (node_id) DO NOTHING
`

func (q *Queries) SetSourceNode(ctx context.Context, nodeID int64) error {
	_, err := q.db.ExecContext(ctx, setSourceNode, nodeID)
	return err
}

const updateNode = `-- name: UpdateNode :exec
UPDATE nodes
SET block_height = $2,
    alias = $3,
    signature = $4,
    updated_at = $5
WHERE id = $1
`

type UpdateNodeParams struct {
	ID          int64
	BlockHeight int64
	Alias       sql.NullString
	Signature   []byte
	UpdatedAt   time.Time
}

func (q *Queries) UpdateNode(ctx context.Context, arg UpdateNodeParams) error {
	_, err := q.db.ExecContext(ctx, updateNode,
		arg.ID,
		arg.BlockHeight,
		arg.Alias,
		arg.Signature,
		arg.UpdatedAt,
	)
	return err
}

const upsertNodeExtraType = `-- name: UpsertNodeExtraType :exec
INSERT INTO node_extra_types (node_id, type, value)
VALUES ($1, $2, $3)
ON CONFLICT (type, node_id)
    DO UPDATE SET value = EXCLUDED.value
`

type UpsertNodeExtraTypeParams struct {
	NodeID int64
	Type   int64
	Value  []byte
}

func (q *Queries) UpsertNodeExtraType(ctx context.Context, arg UpsertNodeExtraTypeParams) error {
	_, err := q.db.ExecContext(ctx, upsertNodeExtraType, arg.NodeID, arg.Type, arg.Value)
	return err
}
