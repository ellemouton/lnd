// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: channel_policies.sql

package sqlc

import (
	"context"
	"database/sql"
)

const addChannelPolicyExtraType = `-- name: AddChannelPolicyExtraType :exec
INSERT INTO channel_policy_extra_types (
    channel_policy_id, type, value
) VALUES (
    $1, $2, $3
)
ON CONFLICT (type, channel_policy_id)
    DO UPDATE SET value = EXCLUDED.value
`

type AddChannelPolicyExtraTypeParams struct {
	ChannelPolicyID int64
	Type            int64
	Value           []byte
}

func (q *Queries) AddChannelPolicyExtraType(ctx context.Context, arg AddChannelPolicyExtraTypeParams) error {
	_, err := q.db.ExecContext(ctx, addChannelPolicyExtraType, arg.ChannelPolicyID, arg.Type, arg.Value)
	return err
}

const createChannelPolicy = `-- name: CreateChannelPolicy :one
INSERT INTO channel_policies (
    channel_id, node_id, timelock, fee_ppm, base_fee_msat, min_htlc_msat, signature
) VALUES (
    $1, $2, $3, $4, $5, $6, $7
)
RETURNING id
`

type CreateChannelPolicyParams struct {
	ChannelID   int64
	NodeID      int64
	Timelock    int32
	FeePpm      int64
	BaseFeeMsat int64
	MinHtlcMsat int64
	Signature   []byte
}

func (q *Queries) CreateChannelPolicy(ctx context.Context, arg CreateChannelPolicyParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createChannelPolicy,
		arg.ChannelID,
		arg.NodeID,
		arg.Timelock,
		arg.FeePpm,
		arg.BaseFeeMsat,
		arg.MinHtlcMsat,
		arg.Signature,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const createChannelPolicyV1Data = `-- name: CreateChannelPolicyV1Data :exec
INSERT INTO channel_policy_v1_data (
    channel_policy_id, last_update, disabled, max_htlc_msat
) VALUES (
             $1, $2, $3, $4
         )
`

type CreateChannelPolicyV1DataParams struct {
	ChannelPolicyID int64
	LastUpdate      int64
	Disabled        bool
	MaxHtlcMsat     sql.NullInt64
}

func (q *Queries) CreateChannelPolicyV1Data(ctx context.Context, arg CreateChannelPolicyV1DataParams) error {
	_, err := q.db.ExecContext(ctx, createChannelPolicyV1Data,
		arg.ChannelPolicyID,
		arg.LastUpdate,
		arg.Disabled,
		arg.MaxHtlcMsat,
	)
	return err
}

const deleteAllChannelPolicyExtraTypes = `-- name: DeleteAllChannelPolicyExtraTypes :exec
DELETE FROM channel_policy_extra_types WHERE channel_policy_id = $1
`

func (q *Queries) DeleteAllChannelPolicyExtraTypes(ctx context.Context, channelPolicyID int64) error {
	_, err := q.db.ExecContext(ctx, deleteAllChannelPolicyExtraTypes, channelPolicyID)
	return err
}

const deleteChannelPolicyExtraType = `-- name: DeleteChannelPolicyExtraType :exec
DELETE FROM channel_policy_extra_types
WHERE channel_policy_id = $1 AND type = $2
`

type DeleteChannelPolicyExtraTypeParams struct {
	ChannelPolicyID int64
	Type            int64
}

func (q *Queries) DeleteChannelPolicyExtraType(ctx context.Context, arg DeleteChannelPolicyExtraTypeParams) error {
	_, err := q.db.ExecContext(ctx, deleteChannelPolicyExtraType, arg.ChannelPolicyID, arg.Type)
	return err
}

const getChannelPolicyByChannelAndNode = `-- name: GetChannelPolicyByChannelAndNode :one
SELECT id, channel_id, node_id, timelock, fee_ppm, base_fee_msat, min_htlc_msat, signature FROM channel_policies
WHERE channel_id = $1 AND node_id = $2
`

type GetChannelPolicyByChannelAndNodeParams struct {
	ChannelID int64
	NodeID    int64
}

func (q *Queries) GetChannelPolicyByChannelAndNode(ctx context.Context, arg GetChannelPolicyByChannelAndNodeParams) (ChannelPolicy, error) {
	row := q.db.QueryRowContext(ctx, getChannelPolicyByChannelAndNode, arg.ChannelID, arg.NodeID)
	var i ChannelPolicy
	err := row.Scan(
		&i.ID,
		&i.ChannelID,
		&i.NodeID,
		&i.Timelock,
		&i.FeePpm,
		&i.BaseFeeMsat,
		&i.MinHtlcMsat,
		&i.Signature,
	)
	return i, err
}

const getChannelPolicyExtraTypes = `-- name: GetChannelPolicyExtraTypes :many
SELECT channel_policy_id, type, value FROM channel_policy_extra_types WHERE channel_policy_id = $1
`

func (q *Queries) GetChannelPolicyExtraTypes(ctx context.Context, channelPolicyID int64) ([]ChannelPolicyExtraType, error) {
	rows, err := q.db.QueryContext(ctx, getChannelPolicyExtraTypes, channelPolicyID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ChannelPolicyExtraType
	for rows.Next() {
		var i ChannelPolicyExtraType
		if err := rows.Scan(&i.ChannelPolicyID, &i.Type, &i.Value); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getChannelPolicyV1Data = `-- name: GetChannelPolicyV1Data :one
SELECT channel_policy_id, last_update, disabled, max_htlc_msat FROM channel_policy_v1_data WHERE channel_policy_id = $1
`

func (q *Queries) GetChannelPolicyV1Data(ctx context.Context, channelPolicyID int64) (ChannelPolicyV1Datum, error) {
	row := q.db.QueryRowContext(ctx, getChannelPolicyV1Data, channelPolicyID)
	var i ChannelPolicyV1Datum
	err := row.Scan(
		&i.ChannelPolicyID,
		&i.LastUpdate,
		&i.Disabled,
		&i.MaxHtlcMsat,
	)
	return i, err
}

const getV1ChannelPolicyByChannelAndNode = `-- name: GetV1ChannelPolicyByChannelAndNode :one
SELECT
    cp.id, cp.channel_id, cp.node_id, cp.timelock, cp.fee_ppm, cp.base_fee_msat, cp.min_htlc_msat, cp.signature,
    v1.channel_policy_id, v1.last_update, v1.disabled, v1.max_htlc_msat
FROM channel_policies cp
         JOIN channel_policy_v1_data v1 ON cp.id = v1.channel_policy_id
WHERE channel_id = $1 AND node_id = $2
`

type GetV1ChannelPolicyByChannelAndNodeParams struct {
	ChannelID int64
	NodeID    int64
}

type GetV1ChannelPolicyByChannelAndNodeRow struct {
	ID              int64
	ChannelID       int64
	NodeID          int64
	Timelock        int32
	FeePpm          int64
	BaseFeeMsat     int64
	MinHtlcMsat     int64
	Signature       []byte
	ChannelPolicyID int64
	LastUpdate      int64
	Disabled        bool
	MaxHtlcMsat     sql.NullInt64
}

func (q *Queries) GetV1ChannelPolicyByChannelAndNode(ctx context.Context, arg GetV1ChannelPolicyByChannelAndNodeParams) (GetV1ChannelPolicyByChannelAndNodeRow, error) {
	row := q.db.QueryRowContext(ctx, getV1ChannelPolicyByChannelAndNode, arg.ChannelID, arg.NodeID)
	var i GetV1ChannelPolicyByChannelAndNodeRow
	err := row.Scan(
		&i.ID,
		&i.ChannelID,
		&i.NodeID,
		&i.Timelock,
		&i.FeePpm,
		&i.BaseFeeMsat,
		&i.MinHtlcMsat,
		&i.Signature,
		&i.ChannelPolicyID,
		&i.LastUpdate,
		&i.Disabled,
		&i.MaxHtlcMsat,
	)
	return i, err
}

const updateChannelPolicy = `-- name: UpdateChannelPolicy :exec
UPDATE channel_policies
SET timelock = $2,
    fee_ppm = $3,
    base_fee_msat = $4,
    min_htlc_msat = $5,
    signature = $6
WHERE id = $1
`

type UpdateChannelPolicyParams struct {
	ID          int64
	Timelock    int32
	FeePpm      int64
	BaseFeeMsat int64
	MinHtlcMsat int64
	Signature   []byte
}

func (q *Queries) UpdateChannelPolicy(ctx context.Context, arg UpdateChannelPolicyParams) error {
	_, err := q.db.ExecContext(ctx, updateChannelPolicy,
		arg.ID,
		arg.Timelock,
		arg.FeePpm,
		arg.BaseFeeMsat,
		arg.MinHtlcMsat,
		arg.Signature,
	)
	return err
}

const updateChannelPolicyV1Data = `-- name: UpdateChannelPolicyV1Data :exec
UPDATE channel_policy_v1_data
SET last_update = $2,
    disabled = $3,
    max_htlc_msat = $4
WHERE channel_policy_id = $1
`

type UpdateChannelPolicyV1DataParams struct {
	ChannelPolicyID int64
	LastUpdate      int64
	Disabled        bool
	MaxHtlcMsat     sql.NullInt64
}

func (q *Queries) UpdateChannelPolicyV1Data(ctx context.Context, arg UpdateChannelPolicyV1DataParams) error {
	_, err := q.db.ExecContext(ctx, updateChannelPolicyV1Data,
		arg.ChannelPolicyID,
		arg.LastUpdate,
		arg.Disabled,
		arg.MaxHtlcMsat,
	)
	return err
}
